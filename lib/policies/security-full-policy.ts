import cdk = require('@aws-cdk/core');
import iam = require('@aws-cdk/aws-iam');

export class SecurityFullPolicy extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const document = new iam.PolicyDocument();
    document.addStatements(new iam.PolicyStatement({
      resources: ['*'],
      actions: [
        'acm:*',
        'application-autoscaling:Describe*',
        'appsync:List*',
        'athena:List*',
        'autoscaling:Describe*',
        'aws-marketplace:DescribeBuilds',
        'aws-marketplace:ListBuilds',
        'aws-marketplace:ViewSubscriptions',
        'clouddirectory:ListDirectories',
        'cloudfront:Get*',
        'cloudfront:List*',
        'cloudhsm:ListHapgs',
        'cloudhsm:ListHsms',
        'cloudhsm:ListLunaClients',
        'cloudtrail:DescribeTrails',
        'cloudtrail:GetEventSelectors',
        'cloudtrail:GetTrailStatus',
        'cloudtrail:ListTags',
        'cloudtrail:LookupEvents',
        'cloudwatch:Describe*',
        'config:BatchGetAggregateResourceConfig',
        'config:BatchGetResourceConfig',
        'config:Deliver*',
        'config:Describe*',
        'config:Get*',
        'config:List*',
        'dms:Describe*',
        'dms:ListTagsForResource',
        'ds:DescribeDirectories',
        'ec2:*NetworkInterface*',
        'ec2:*Tag*',
        'ec2:AuthorizeSecurityGroupEgress',
        'ec2:AuthorizeSecurityGroupIngress',
        'ec2:CreateSecurityGroup',
        'ec2:DeleteSecurityGroup',
        'ec2:Describe*',
        'ec2:RevokeSecurityGroupEgress',
        'ec2:RevokeSecurityGroupIngress',
        'ec2:UpdateSecurityGroupRuleDescriptionsEgress',
        'ec2:UpdateSecurityGroupRuleDescriptionsIngress',
        'ecr:DescribeRepositories',
        'ecr:GetRepositoryPolicy',
        'ecs:Describe*',
        'ecs:List*',
        'eks:DescribeCluster',
        'eks:ListClusters',
        'es:Describe*',
        'es:ListDomainNames',
        'events:Describe*',
        'events:DescribeRule',
        'events:List*',
        'events:ListRuleNamesByTarget',
        'firehose:Describe*',
        'firehose:List*',
        'fms:ListComplianceStatus',
        'fms:ListPolicies',
        'fsx:Describe*',
        'fsx:List*',
        'greengrass:List*',
        'guardduty:*',
        'guardduty:Get*',
        'guardduty:List*',
        'iam:GenerateCredentialReport',
        'iam:GenerateServiceLastAccessedDetails',
        'iam:Get*',
        'iam:List*',
        'iam:ListInstanceProfiles',
        'iam:ListRoles',
        'iam:ListServerCertificates',
        'iam:SimulateCustomPolicy',
        'iam:SimulatePrincipalPolicy',
        'inspector:*',
        'kms:Describe*',
        'kms:Get*',
        'kms:List*',
        'lambda:GetAccountSettings',
        'lambda:GetFunctionConfiguration',
        'lambda:GetLayerVersionPolicy',
        'lambda:GetPolicy',
        'lambda:List*',
        'license-manager:List*',
        'logs:Describe*',
        'logs:ListTagsLogGroup',
        'organizations:Describe*',
        'organizations:List*',
        'quicksight:Describe*',
        'quicksight:List*',
        'ram:List*',
        'route53:Get*',
        'route53:List*',
        'route53domains:GetDomainDetail',
        'route53domains:GetOperationDetail',
        'route53domains:ListDomains',
        'route53domains:ListOperations',
        'route53domains:ListTagsForDomain',
        'route53resolver:Get*',
        'route53resolver:List*',
        's3:GetAccelerateConfiguration',
        's3:GetAccountPublicAccessBlock',
        's3:GetAnalyticsConfiguration',
        's3:GetBucket*',
        's3:GetEncryptionConfiguration',
        's3:GetInventoryConfiguration',
        's3:GetLifecycleConfiguration',
        's3:GetMetricsConfiguration',
        's3:GetObjectAcl',
        's3:GetObjectVersionAcl',
        's3:GetReplicationConfiguration',
        's3:ListAllMyBuckets',
        'secretsmanager:GetResourcePolicy',
        'secretsmanager:ListSecrets',
        'secretsmanager:ListSecretVersionIds',
        'securityhub:Get*',
        'securityhub:List*',
        'serverlessrepo:GetApplicationPolicy',
        'serverlessrepo:List*',
        'ses:GetIdentityDkimAttributes',
        'ses:GetIdentityVerificationAttributes',
        'ses:ListIdentities',
        'ses:ListVerifiedEmailAddresses',
        'shield:*',
        'snowball:ListClusters',
        'snowball:ListJobs',
        'sns:GetTopicAttributes',
        'sns:ListSubscriptionsByTopic',
        'sns:ListTopics',
        'sqs:GetQueueAttributes',
        'sqs:ListDeadLetterSourceQueues',
        'sqs:ListQueues',
        'sqs:ListQueueTags',
        'ssm:Describe*',
        'ssm:ListDocuments',
        'sso:DescribePermissionsPolicies',
        'sso:List*',
        'states:ListStateMachines',
        'tag:GetResources',
        'tag:GetTagKeys',
        'transfer:Describe*',
        'transfer:List*',
        'translate:List*',
        'trustedadvisor:Describe*',
        'waf-regional:*',
        'waf-regional:ListWebACLs',
        'waf:*',
        'waf:ListWebACLs',
        'workspaces:Describe*',
      ]
    }));

    document.addStatements(new iam.PolicyStatement({
      resources: [
        'arn:aws:apigateway:*::/restapis',
        'arn:aws:apigateway:*::/restapis/*/authorizers',
        'arn:aws:apigateway:*::/restapis/*/authorizers/*',
        'arn:aws:apigateway:*::/restapis/*/resources',
        'arn:aws:apigateway:*::/restapis/*/resources/*',
        'arn:aws:apigateway:*::/restapis/*/resources/*/methods/*',
        'arn:aws:apigateway:*::/vpclinks',
      ],
      actions: [
        'apigateway:GET',
      ]
    }));

    document.addStatements(new iam.PolicyStatement({
      resources: ['*'],
      actions: [
        'iam:PassRole',
      ],
      conditions: {'StringEquals': {'iam:PassedToService': [
        'inspector.amazonaws.com',
      ]}}
    }));

    document.addStatements(new iam.PolicyStatement({
      resources: ['*'],
      actions: [
        'iam:CreateServiceLinkedRole',
      ],
      conditions: {'StringEquals': {'iam:AWSServiceName': [
        'guardduty.amazonaws.com',
        'inspector.amazonaws.com',
      ]}}
    }));

    const security_full_policy_name = this.node.tryGetContext("security_full_policy_name");
    const managedpolicy = new iam.CfnManagedPolicy(this, security_full_policy_name, {
        policyDocument: document,
        managedPolicyName: security_full_policy_name
    });
  }
}
